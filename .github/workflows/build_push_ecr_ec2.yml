# This is a basic workflow to help you get started with Actions

name: Build and Push Docker image to AWS ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Print Job Run URL
        id: print_job_run_id
        run: |
          echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4.1.5
        with:
          fetch-depth: 0 # Necessary to fetch all tags and history
      - name: Determine Next Version
        id: next_version
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Get the latest tag, assume semver, and sort.
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          # If there's no tag yet, start with v0.0.0. Used for new repos
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          
          # Increment the patch version
          NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
          
          # Output the next version (GITHUB_ENV - is the environment variable file in Github actions)
          echo "tag=$NEXT_TAG" >> $GITHUB_ENV
          # echo "::set-output name=tag::$NEXT_TAG"
          echo "Next version: $NEXT_TAG"
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN_2 }}
      #   with:
      #     tag_name: ${{ env.tag }}
      #     release_name: Release ${{ env.tag }} 
      #     # tag_name: ${{ steps.next_version.outputs.tag }}
      #     # release_name: Release ${{ steps.next_version.outputs.tag }}
      #     draft: false
      #     prerelease: false
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ap-south-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Extract repository name
        id: repo-name
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          # echo "::set-output name=repo_name::$REPO_NAME"
          echo "GitHub Repository = $REPO_NAME"
      # - name: Build Docker image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.REPO_NAME }}
      #     # IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      #     IMAGE_TAG: ${{ env.tag }}
      #   run: |
      #     echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      #     echo "ECR Image Name = $IMAGE_NAME"
      # - name: Push Docker image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ env.REPO_NAME }}
      #     # IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      #     IMAGE_TAG: ${{ env.tag }}
      #   run: |
      #     # Tag the image as latest
      #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     # Push the specific version tag
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     # Push the latest tag
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Create Docker Compose File
        id: docker_compose_file_create
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}
          IMAGE_TAG: ${{ env.tag }}
        run: |
          DCF="docker-compose-$IMAGE_TAG.yml"
          echo "DockerComposeFile=$DCF" >> $GITHUB_ENV
          touch $DCF
          echo "version: '2.4'" >> $DCF
          echo "services:" >> $DCF
          echo " counter-service:" >> $DCF
          echo "   container_name: devops_gitactions-service" >> $DCF
          echo "   image: $ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $DCF
          echo "    volumes:" >> $DCF
          echo "      - ./data:/data" >> $DCF
          echo "    ports:" >> $DCF
          echo "      - '80:8080'" >> $DCF
          echo "    restart: always" >> $DCF
          echo "    mem_limit: 256M" >> $DCF
          echo "    cpus: 0.5" >> $DCF
          cat $DCF
      - name: Deploy to EC2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION}}
          EC2_PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}
          IMAGE_TAG: ${{ env.tag }}
          DCF: ${{ env.DockerComposeFile }}
        run: |
          # Save PEM key to file and set permissions
          echo "$EC2_PEM_KEY" > ec2.pem
          chmod 400 ec2.pem
  
          # SSH, SCP commands
          SSH_COMMAND="ssh -i ec2.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST"
          SCP_COMMAND="scp -i ec2.pem -o StrictHostKeyChecking=no"
  
          #Login to the Docker Registry (ECR)
          $SSH_COMMAND "aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY"
          
          # Copy docker-compose.yml to EC2 server
          # $SCP_COMMAND docker-compose.yml $EC2_USER@$EC2_HOST:/home/$EC2_USER/docker/
          $SCP_COMMAND $DCF $EC2_USER@$EC2_HOST:/home/$EC2_USER/docker/
          
          # Pull and run the Docker container on EC2
          $SSH_COMMAND "cd /home/$EC2_USER/docker/ && sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG && sudo docker compose -f $DCF up -d --force-recreate"
          
          # Cleanup PEM key
          rm -f ec2.pem
          # Cleanup Docker Compose file
          # rm -f $DCF